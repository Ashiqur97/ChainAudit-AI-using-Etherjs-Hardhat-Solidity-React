import React from 'react';
import { VulnerabilityAnalysisResult } from '../services/vulnerabilityAnalysisService';

interface VulnerabilityAnalysisProps {
  contractAddress: string;
  results: VulnerabilityAnalysisResult | null;
  darkMode: boolean;
  onAnalyze?: (contractAddress: string) => Promise<void>;
  isAnalyzing?: boolean;
  error?: string;
}

export const VulnerabilityAnalysis: React.FC<VulnerabilityAnalysisProps> = ({
  contractAddress,
  results,
  darkMode,
  onAnalyze,
  isAnalyzing,
  error
}) => {
  // This function is used to get text color based on risk level
  const getRiskColor = (risk: string) => {
    switch (risk) {
      case 'critical': return 'text-red-500';
      case 'high': return 'text-orange-500';
      case 'medium': return 'text-yellow-500';
      case 'low': return 'text-green-500';
      default: return 'text-gray-500';
    }
  };

  // This function returns appropriate badge styling based on severity level
  const getSeverityBadgeColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-500/20 text-red-500';
      case 'high': return 'bg-orange-500/20 text-orange-500';
      case 'medium': return 'bg-yellow-500/20 text-yellow-500';
      case 'low': return 'bg-green-500/20 text-green-500';
      default: return 'bg-gray-500/20 text-gray-500';
    }
  };

  return (
    <div className={`p-6 rounded-2xl border transition-all duration-300 ${
      darkMode
        ? 'bg-gray-800/70 border-gray-700 backdrop-blur-sm'
        : 'bg-white/80 border-gray-200 backdrop-blur-sm'
    }`}>
      <h3 className={`text-xl font-bold mb-4 ${
        darkMode ? 'text-white' : 'text-gray-900'
      }`}>
        Vulnerability Analysis
      </h3>
      
      <div className="space-y-6">
        {/* Contract Address and Risk Badge */}
        <div className="flex items-center justify-between">
          <div>
            <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
              Contract Address
            </p>
            <p className={`font-mono text-sm ${darkMode ? 'text-white' : 'text-gray-900'}`}>
              {contractAddress && contractAddress.length > 18 ? 
                `${contractAddress.substring(0, 10)}...${contractAddress.substring(contractAddress.length - 8)}` : 
                contractAddress || 'N/A'}
            </p>
          </div>
          {results ? (
            <div className={`px-3 py-1 rounded-full text-sm font-medium ${getSeverityBadgeColor(results.overallRisk)}`}>
              Overall Risk: {results.overallRisk.charAt(0).toUpperCase() + results.overallRisk.slice(1)}
            </div>
          ) : isAnalyzing ? (
            <div className={`px-3 py-1 rounded-full text-sm font-medium ${darkMode ? 'bg-blue-500/20 text-blue-400' : 'bg-blue-100 text-blue-600'}`}>
              Analyzing...
            </div>
          ) : (
            <div className={`px-3 py-1 rounded-full text-sm font-medium ${darkMode ? 'bg-gray-700/50 text-gray-400' : 'bg-gray-200 text-gray-600'}`}>
              Not Analyzed
            </div>
          )}
        </div>
        
        {/* Info Banner */}
        <div className={`text-xs p-3 rounded-lg ${
          darkMode ? 'bg-blue-900/20 text-blue-400' : 'bg-blue-50 text-blue-700'
        }`}>
          <p>This analysis identifies potential vulnerabilities in the smart contract. It is not a comprehensive security audit.</p>
        </div>
        
        {/* Analysis Results or Status */}
        {error ? (
          <div className={`p-4 rounded-xl text-center ${darkMode ? 'bg-red-900/20 text-red-400' : 'bg-red-50 text-red-700'}`}>
            <p className="font-medium">Analysis Error</p>
            <p className="text-sm mt-1">{error}</p>
          </div>
        ) : isAnalyzing ? (
          <div className={`p-4 rounded-xl text-center ${darkMode ? 'bg-blue-900/20 text-blue-400' : 'bg-blue-50 text-blue-700'}`}>
            <p className="font-medium">Analyzing contract for vulnerabilities...</p>
            <p className="text-sm mt-1">This may take a moment.</p>
          </div>
        ) : !results ? (
          <div className="space-y-4">
            <div className={`p-4 rounded-xl text-center ${darkMode ? 'bg-gray-800/50 text-gray-400' : 'bg-gray-100 text-gray-600'}`}>
              <p className="font-medium">No Analysis Results</p>
              <p className="text-sm mt-1">Click the button below to analyze this contract for potential vulnerabilities.</p>
            </div>
            
            {onAnalyze && (
              <button
                onClick={() => contractAddress ? onAnalyze(contractAddress) : null}
                disabled={!contractAddress}
                className={`w-full py-2 px-4 rounded-lg font-medium transition-colors ${!contractAddress ? 'bg-gray-400 cursor-not-allowed text-gray-200' : darkMode ? 'bg-blue-600 hover:bg-blue-700 text-white' : 'bg-blue-500 hover:bg-blue-600 text-white'}`}
              >
                {!contractAddress ? 'No Valid Contract Address' : 'Analyze Vulnerabilities'}
              </button>
            )}
          </div>
        ) : (
          <div>
            <h4 className={`font-semibold mb-3 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
              Detected Vulnerabilities ({results.vulnerabilities.length})
            </h4>
            
            {results.vulnerabilities.length === 0 ? (
              <div className={`p-4 rounded-xl text-center ${
                darkMode ? 'bg-green-900/20 text-green-400' : 'bg-green-50 text-green-700'
              }`}>
                <p className="font-medium">No vulnerabilities detected</p>
                <p className="text-sm mt-1">No potential vulnerabilities were identified in this analysis.</p>
              </div>
            ) : (
              <div className="space-y-4">
                {results.vulnerabilities.map((vuln, index) => (
                  <div 
                    key={index} 
                    className={`p-4 rounded-xl border ${
                      darkMode 
                        ? 'bg-gray-800/50 border-gray-700' 
                        : 'bg-gray-50 border-gray-200'
                    }`}
                  >
                    <div className="flex items-start justify-between">
                      <h5 className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                        {vuln.title}
                      </h5>
                      <span className={`px-2 py-1 rounded text-xs font-medium ${getSeverityBadgeColor(vuln.severity)}`}>
                        {vuln.severity.charAt(0).toUpperCase() + vuln.severity.slice(1)}
                      </span>
                    </div>
                    
                    <p className={`mt-2 text-sm ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                      {vuln.description}
                    </p>
                    
                    <div className={`mt-3 p-3 rounded-lg ${
                      darkMode ? 'bg-gray-700/50' : 'bg-gray-100'
                    }`}>
                      <p className={`text-xs font-medium mb-1 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                        Recommendation
                      </p>
                      <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                        {vuln.recommendation}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
        
        {/* Analysis Timestamp */}
        {results && (
          <div className={`text-xs p-3 rounded-lg mt-4 ${
            darkMode ? 'bg-gray-700/50 text-gray-400' : 'bg-gray-100 text-gray-600'
          }`}>
            <p>Analyzed on {new Date(results.lastAnalyzed).toLocaleString()}</p>
          </div>
        )}
      </div>
    </div>
  );
};
