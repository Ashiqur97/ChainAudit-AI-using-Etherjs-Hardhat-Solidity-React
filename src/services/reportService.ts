import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { AuditResult } from '../types/audit';

export class ReportService {
  async generatePDFReport(auditResult: AuditResult): Promise<void> {
    try {
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const margin = 20;
      let yPosition = margin;

      // Header
      pdf.setFontSize(24);
      pdf.setTextColor(59, 130, 246); // Blue
      pdf.text('CryptoAudit Pro - Security Report', margin, yPosition);
      yPosition += 15;

      pdf.setFontSize(12);
      pdf.setTextColor(100, 100, 100);
      pdf.text(`Generated: ${new Date().toLocaleString()}`, margin, yPosition);
      pdf.text(`Audit ID: ${auditResult.auditId}`, margin, yPosition + 5);
      yPosition += 20;

      // Token Information
      this.addSection(pdf, 'Token Information', yPosition);
      yPosition += 10;
      
      pdf.setFontSize(10);
      pdf.setTextColor(0, 0, 0);
      const tokenInfo = [
        `Name: ${auditResult.tokenInfo.name}`,
        `Symbol: ${auditResult.tokenInfo.symbol}`,
        `Contract: ${auditResult.tokenInfo.contractAddress}`,
        `Total Supply: ${Number(auditResult.tokenInfo.totalSupply).toLocaleString()}`,
        `Decimals: ${auditResult.tokenInfo.decimals}`,
        `Verified: ${auditResult.tokenInfo.verified ? 'Yes' : 'No'}`
      ];
      
      tokenInfo.forEach(info => {
        pdf.text(info, margin, yPosition);
        yPosition += 5;
      });
      yPosition += 10;

      // Security Analysis
      this.addSection(pdf, 'Security Analysis', yPosition);
      yPosition += 10;
      
      const riskColor = this.getRiskColor(auditResult.security.riskLevel);
      pdf.setTextColor(riskColor.r, riskColor.g, riskColor.b);
      pdf.text(`Risk Level: ${auditResult.security.riskLevel} (Score: ${auditResult.security.riskScore}/100)`, margin, yPosition);
      yPosition += 8;
      
      pdf.setTextColor(0, 0, 0);
      pdf.text(`Can Buy: ${auditResult.security.canBuy ? 'Yes' : 'No'}`, margin, yPosition);
      pdf.text(`Can Sell: ${auditResult.security.canSell ? 'Yes' : 'No'}`, margin + 60, yPosition);
      yPosition += 8;
      
      if (auditResult.security.issues.length > 0) {
        pdf.text('Security Issues:', margin, yPosition);
        yPosition += 5;
        
        auditResult.security.issues.forEach(issue => {
          pdf.setFontSize(9);
          pdf.text(`â€¢ ${issue.title}: ${issue.description}`, margin + 5, yPosition);
          yPosition += 4;
        });
        pdf.setFontSize(10);
      }
      yPosition += 10;

      // Liquidity Analysis
      if (yPosition > 250) {
        pdf.addPage();
        yPosition = margin;
      }
      
      this.addSection(pdf, 'Liquidity Analysis', yPosition);
      yPosition += 10;
      
      const liquidityInfo = [
        `Total Liquidity: $${Number(auditResult.liquidity.totalLiquidity).toLocaleString()}`,
        `Liquidity Locked: ${auditResult.liquidity.liquidityLocked ? 'Yes' : 'No'}`,
        `Lock Duration: ${auditResult.liquidity.lockDuration}`,
        `DEX Pairs: ${auditResult.liquidity.dexPairs.length}`
      ];
      
      liquidityInfo.forEach(info => {
        pdf.text(info, margin, yPosition);
        yPosition += 5;
      });
      yPosition += 10;

      // Owner Analysis
      this.addSection(pdf, 'Owner Analysis', yPosition);
      yPosition += 10;
      
      const ownerInfo = [
        `Owner Address: ${auditResult.owner.ownerAddress}`,
        `Ownership Renounced: ${auditResult.owner.ownershipRenounced ? 'Yes' : 'No'}`,
        `MultiSig: ${auditResult.owner.multiSig ? 'Yes' : 'No'}`,
        `Reputation: ${auditResult.owner.reputation.toUpperCase()}`,
        `Previous Projects: ${auditResult.owner.previousProjects}`
      ];
      
      ownerInfo.forEach(info => {
        pdf.text(info, margin, yPosition);
        yPosition += 5;
      });
      yPosition += 10;

      // Transaction Analysis
      if (yPosition > 220) {
        pdf.addPage();
        yPosition = margin;
      }
      
      this.addSection(pdf, 'Transaction Analysis', yPosition);
      yPosition += 10;
      
      const transactionInfo = [
        `Total Transactions: ${auditResult.transactions.totalTransactions.toLocaleString()}`,
        `Unique Holders: ${auditResult.transactions.uniqueHolders.toLocaleString()}`,
        `Average Transaction Size: $${Number(auditResult.transactions.avgTransactionSize).toLocaleString()}`
      ];
      
      transactionInfo.forEach(info => {
        pdf.text(info, margin, yPosition);
        yPosition += 5;
      });

      // Footer
      pdf.setFontSize(8);
      pdf.setTextColor(100, 100, 100);
      pdf.text('This report is generated by CryptoAudit Pro for informational purposes only.', margin, 280);
      pdf.text('Please do your own research before making any investment decisions.', margin, 285);

      // Save the PDF
      pdf.save(`audit-report-${auditResult.tokenInfo.symbol}-${Date.now()}.pdf`);
    } catch (error) {
      console.error('Failed to generate PDF report:', error);
      throw new Error('Failed to generate PDF report');
    }
  }

  private addSection(pdf: jsPDF, title: string, yPosition: number): void {
    pdf.setFontSize(14);
    pdf.setTextColor(59, 130, 246); // Blue
    pdf.text(title, 20, yPosition);
    
    // Add underline
    pdf.setDrawColor(59, 130, 246);
    pdf.line(20, yPosition + 2, 20 + title.length * 2.5, yPosition + 2);
  }

  private getRiskColor(riskLevel: string): { r: number, g: number, b: number } {
    switch (riskLevel) {
      case 'LOW': return { r: 34, g: 197, b: 94 }; // Green
      case 'MEDIUM': return { r: 251, g: 191, b: 36 }; // Yellow
      case 'HIGH': return { r: 249, g: 115, b: 22 }; // Orange
      case 'CRITICAL': return { r: 239, g: 68, b: 68 }; // Red
      default: return { r: 0, g: 0, b: 0 }; // Black
    }
  }
}